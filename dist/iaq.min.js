(()=>{"use strict";window.IAQ=class{constructor(e){this.clientId=e,this.lastUpdated=null,this.host="https://app.hawkenaq.com/api/client",this.dom=null,this.interval=null}generate(e,t){this.dom=e,this.getData(t,!0),null==this.interval&&(this.interval=setInterval(this.getData,3e5,t,!0))}getData(e,t=!1){return a=this,n=void 0,r=function*(){try{let a=new URL(this.host);a.searchParams.append("clientKey",this.clientId),e.widgetId&&a.searchParams.append("widgetId",e.widgetId),Array.isArray(e.measurementIds)&&a.searchParams.append("measurementIds",JSON.stringify(e.measurementIds));let n=yield fetch(a.toString()),i=yield n.json();return t&&(null!=this.dom?this.updateElement(i):console.warn("Dom not initialize")),console.log(i),i}catch(e){console.error(e)}},new((i=void 0)||(i=Promise))((function(e,t){function s(e){try{l(r.next(e))}catch(e){t(e)}}function d(e){try{l(r.throw(e))}catch(e){t(e)}}function l(t){var a;t.done?e(t.value):(a=t.value,a instanceof i?a:new i((function(e){e(a)}))).then(s,d)}l((r=r.apply(a,n||[])).next())}));var a,n,i,r}getDefaultStyle(e,t){if("data-measurement"==e)return"display: flex;height: 226px;width: 315px;padding-left: 32px;padding-right: 24px;padding-top: 16px;padding-bottom: 0px;color:white;background-color: rgb(37, 41, 74);border-radius: 20px;font-family:Roboto,sans-serif;font-weight:300";if("data-measurement-values"==e)return"display:flex;align-items:baseline";if("data-measurement-score"==e)return"font-size:3.2rem";if("data-measurement-unit"==e)return null==t?"display:none":"font-size:1.2rem;margin-left:5px";if("data-name"==e)return"font-size:1.65rem;line-height:2rem;margin-top:1rem";if("data-indicator"==e){if(t){return Number(t)>=75?"display:flex;width:100%;height:30px;justify-content:flex-end;font-size:1.2rem;color:#02c39a":"display:flex;width:100%;height:30px;justify-content:flex-end;font-size:1.2rem;color:#e8912b"}return"display:flex;width:100%;height:30px;justify-content:flex-end;font-size:1.2rem"}return"data-icon"==e?"height:40px;width:40px;margin-bottom:18px":void 0}getIndicatorText(e){return e>=75?"Excellent":e>=50&&e<75?"Moderate":"Poor"}scoreToUse(e){let t;return t="curScore"==e.toUse?Math.round(Number(e.curScore)):isNaN(Number(e.curVal))?e.curVal:Math.round(Number(e.curVal)),String(t)}updateElement(e){let t="";for(let a in e.measurements){let n=e.measurements[a];t+=`<div data-measurement="${a}" style="${this.getDefaultStyle("data-measurement")}">\n            <div data-details style="width:100%">\n                <div data-indicator style="${this.getDefaultStyle("data-indicator",n.curScore)}">${this.getIndicatorText(Number(n.curScore))}</div>\n                <div data-icon style="${this.getDefaultStyle("data-icon")}">${n.icon}</div>\n                <div data-measurement-values style="${this.getDefaultStyle("data-measurement-values")}">\n                    <span data-measurement-score style="${this.getDefaultStyle("data-measurement-score")}">${this.scoreToUse(n)}</span>\n                    <span data-measurement-unit style="${this.getDefaultStyle("data-measurement-unit",n.unit)}">${n.unit}</span>\n                </div>\n                <div data-name style="${this.getDefaultStyle("data-name")}">${n.name}</div>\n            </div>\n        </div>`}this.dom.innerHTML=t}}})();